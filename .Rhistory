#    condition = "input.isHeat == true",
#    htmlOutput("heatHeader"),
#    uiOutput("heatUI")
#)
),
mainPanel(
plotOutput("scatterPlot",
dblclick = "plot1_dblclick",
brush = brushOpts(
id = "plot1_brush",
resetOnNew = TRUE
)) %>%
helper(type = "markdown", content = "Scatterplot", title = "Scatterplot"),
plotOutput("barPlot",
dblclick = "plot2_dblclick",
brush = brushOpts(
id = "plot2_brush",
resetOnNew = TRUE
))# %>%
#helper(type = "markdown", content = "Scatterplot", title = "Scatterplot") %>%
#withSpinner(color="#0dc5c1")
)
)
)
server <- function(input, output) {
observe_helpers()
ranges <- reactiveValues(x = NULL, y = NULL )
# Scatterplot
output$scatterHeader <- renderUI(HTML("<br><h4><b>Scatter plot</b></h4><br>"))
output$scatterUI <- renderUI({
if (!is.null(input$file)) {
f <- input$file
create_ui('Scat', rep(TRUE, 5), f$datapath)
}
})
output$barHeader <- renderUI(HTML("<br><h4><b>Bar plot</b></h4><br>"))
output$barUI <- renderUI({
if (!is.null(input$file)) {
f <- input$file
create_ui('Bar', c(TRUE,TRUE,TRUE,TRUE,TRUE), f$datapath)
}
})
observeEvent(input$buttonScat, {
output$scatterPlot <- renderPlot({
if (input$isScat == TRUE) {
if (!is.null(input$file)) {
# data processing
f <- input$file
dat <- read.csv(f$datapath, stringsAsFactors = TRUE)
# custom legend
legend <- get_legend(input$colScat, input$sizeScat, input$fillScat)
my_aes <- get_aes(input, 'Scat')
#browser()
ggplot(data =  dat,
mapping = my_aes
) +
geom_point() +
theme_fivethirtyeight() +
ggtitle(paste0("Scatter plot ", input$yScat, "~", input$xScat)) +
xlab(input$xScat) +
ylab(input$yScat) +
theme(plot.title = element_text(hjust = 0.5),
axis.title = element_text(),
panel.background = element_blank(),
plot.background = element_blank(),
legend.background = element_blank()) +
coord_cartesian(xlim = ranges$x, ylim = ranges$y, expand = FALSE) +
guides(color = guide_legend(title = legend$color),
size = guide_legend(title = legend$size),
fill = guide_legend(title = legend$fill))
}
}
})
})
observeEvent(input$buttonBar, {
output$barPlot <- renderPlot({
if (input$isBar == TRUE) {
if (!is.null(input$file)) {
#browser()
# data processing
f <- input$file
dat <- read.csv(f$datapath, stringsAsFactors = TRUE)
# custom legend
legend <- get_legend(colValue = input$colBar, fillValue = input$fillBar)
my_aes <- get_aes(input, 'Bar')
ggplot(data =  dat,
mapping = my_aes
) +
geom_bar() +
theme_fivethirtyeight() +
ggtitle("Barplot")+
xlab(input$xScat) +
ylab(input$yScat) +
theme(plot.title = element_text(hjust = 0.5),
axis.title = element_text(),
panel.background = element_blank(),
plot.background = element_blank(),
legend.background = element_blank()) +
#coord_cartesian(xlim = ranges$x, ylim = ranges$y, expand = FALSE) +
guides(color = guide_legend(title = legend$color),
size = guide_legend(title = legend$size),
fill = guide_legend(title = legend$fill))
}
}
})
})
observeEvent(input$plot1_dblclick, {
brush <- input$plot1_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(brush$ymin, brush$ymax)
} else {
ranges$x <- NULL
ranges$y <- NULL
}
})
}
get_legend <- function(colValue = 'None', sizeValue = 'None', fillValue = 'None') {
if (colValue != 'None') color <- colValue
else color <- ""
if (sizeValue != 'None') size <- sizeValue
else size <- ""
if (fillValue != 'None') fill <- fillValue
else fill <- ""
list(color = color, size = size, fill = fill)
}
set_value <- function(value, standard) {
if (value != 'None') {
return(sym(value))
}
standard
}
get_aes <- function(input, shortname) {
mappings <- c("x", "y", "col", "size", "fill")
names <- paste0(mappings, shortname)
my_aes <- list()
for (name in names) {
#browser()
if (input[[name]] != 'None') {
if (name %in% names[1:2]) {
my_aes <- c(my_aes, sprintf("eval(sym(input$%s))", name))
} else {
my_aes <- c(my_aes, sprintf("eval(set_value(input$%s, NULL))", name))
}
}
else my_aes <- c(my_aes, 'None')
}
names(my_aes) <- mappings
my_aes <- my_aes[if_else(my_aes != 'None', TRUE, FALSE)]
do.call(aes_string, my_aes)
}
create_ui <- function(shortname = "Scat", attributes_logicals, data_file) {
# logicals vector of true false for (x,y,col, fill, size)
attrs <- c("x", "y", "col", "fill" ,"size")
descriptions <- c("x-axis variable", "y-axis variable", "Color variable",
"Fill variable", "Size variable")
good_attrs <- attrs[attributes_logicals]
good_descr <- descriptions[attributes_logicals]
options <- colnames(read.csv(data_file))
l <- lapply(seq(good_attrs), function(i, good_descr, good_attrs, shortname, options) {
selectInput(
paste0(good_attrs[i], shortname, collapse = ''),
good_descr[i],
c('None', options)
) }, good_descr, good_attrs, shortname, options)
l <- merge_lists(l, actionButton(paste0("button", shortname), "Generate plot"))
l
}
merge_lists <- function(l1, l2) {
c(l1, list(l2))
}
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(ggthemes)
library(ggplot2)
library(shinycssloaders)
library(shinyhelper)
#devtools::install_github('raredd/rawr')
library(rawr)
ui <- fluidPage(
titlePanel("Plot your data!"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Choose a CSV file"),
checkboxInput(inputId = "isScat", label = "Scatterplot"),
checkboxInput(inputId = "isBar", label = "Barchart"),
checkboxInput(inputId = "isHeat", label = "Heatmap"),
# scatterplot
conditionalPanel(
condition = "input.isScat == true",
htmlOutput("scatterHeader"),
uiOutput("scatterUI")
),
# barchart
conditionalPanel(
condition = "input.isBar == true",
htmlOutput("barHeader"),
uiOutput("barUI")
)#,
# heatmap
#conditionalPanel(
#    condition = "input.isHeat == true",
#    htmlOutput("heatHeader"),
#    uiOutput("heatUI")
#)
),
mainPanel(
plotOutput("scatterPlot",
dblclick = "plot1_dblclick",
brush = brushOpts(
id = "plot1_brush",
resetOnNew = TRUE
)) %>%
helper(type = "markdown", content = "Scatterplot", title = "Scatterplot"),
plotOutput("barPlot",
dblclick = "plot2_dblclick",
brush = brushOpts(
id = "plot2_brush",
resetOnNew = TRUE
))# %>%
#helper(type = "markdown", content = "Scatterplot", title = "Scatterplot") %>%
#withSpinner(color="#0dc5c1")
)
)
)
server <- function(input, output) {
observe_helpers()
ranges <- reactiveValues(x = NULL, y = NULL )
# Scatterplot
output$scatterHeader <- renderUI(HTML("<br><h4><b>Scatter plot</b></h4><br>"))
output$scatterUI <- renderUI({
if (!is.null(input$file)) {
f <- input$file
create_ui('Scat', rep(TRUE, 5), f$datapath)
}
})
output$barHeader <- renderUI(HTML("<br><h4><b>Bar plot</b></h4><br>"))
output$barUI <- renderUI({
if (!is.null(input$file)) {
f <- input$file
create_ui('Bar', c(TRUE,TRUE,TRUE,TRUE,TRUE), f$datapath)
}
})
observeEvent(input$buttonScat, {
output$scatterPlot <- renderPlot({
if (input$isScat == TRUE) {
if (!is.null(input$file)) {
# data processing
f <- input$file
dat <- read.csv(f$datapath, stringsAsFactors = TRUE)
# custom legend
legend <- get_legend(input$colScat, input$sizeScat, input$fillScat)
my_aes <- get_aes(input, 'Scat')
#browser()
ggplot(data =  dat,
mapping = my_aes
) +
geom_point() +
theme_fivethirtyeight() +
ggtitle(paste0("Scatter plot ", input$yScat, "~", input$xScat)) +
xlab(input$xScat) +
ylab(input$yScat) +
theme(plot.title = element_text(hjust = 0.5),
axis.title = element_text(),
panel.background = element_blank(),
plot.background = element_blank(),
legend.background = element_blank()) +
coord_cartesian(xlim = ranges$x, ylim = ranges$y, expand = FALSE) +
guides(color = guide_legend(title = legend$color),
size = guide_legend(title = legend$size),
fill = guide_legend(title = legend$fill))
}
}
})
})
observeEvent(input$buttonBar, {
output$barPlot <- renderPlot({
if (input$isBar == TRUE) {
if (!is.null(input$file)) {
#browser()
# data processing
f <- input$file
dat <- read.csv(f$datapath, stringsAsFactors = TRUE)
# custom legend
legend <- get_legend(colValue = input$colBar, fillValue = input$fillBar)
my_aes <- get_aes(input, 'Bar')
ggplot(data =  dat,
mapping = my_aes
) +
geom_bar() +
theme_fivethirtyeight() +
ggtitle("Barplot")+
xlab(input$xScat) +
ylab(input$yScat) +
theme(plot.title = element_text(hjust = 0.5),
axis.title = element_text(),
panel.background = element_blank(),
plot.background = element_blank(),
legend.background = element_blank()) +
#coord_cartesian(xlim = ranges$x, ylim = ranges$y, expand = FALSE) +
guides(color = guide_legend(title = legend$color),
size = guide_legend(title = legend$size),
fill = guide_legend(title = legend$fill))
}
}
})
})
observeEvent(input$plot1_dblclick, {
brush <- input$plot1_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(brush$ymin, brush$ymax)
} else {
ranges$x <- NULL
ranges$y <- NULL
}
})
}
get_legend <- function(colValue = 'None', sizeValue = 'None', fillValue = 'None') {
if (colValue != 'None') color <- colValue
else color <- ""
if (sizeValue != 'None') size <- sizeValue
else size <- ""
if (fillValue != 'None') fill <- fillValue
else fill <- ""
list(color = color, size = size, fill = fill)
}
set_value <- function(value, standard) {
if (value != 'None') {
return(sym(value))
}
standard
}
get_aes <- function(input, shortname) {
mappings <- c("x", "y", "col", "size", "fill")
names <- paste0(mappings, shortname)
my_aes <- list()
for (name in names) {
#browser()
if (input[[name]] != 'None') {
if (name %in% names[1:2]) {
my_aes <- c(my_aes, sprintf("eval(sym(input$%s))", name))
} else {
my_aes <- c(my_aes, sprintf("eval(set_value(input$%s, NULL))", name))
}
}
else my_aes <- c(my_aes, 'None')
}
names(my_aes) <- mappings
my_aes <- my_aes[if_else(my_aes != 'None', TRUE, FALSE)]
do.call(aes_string, my_aes)
}
create_ui <- function(shortname = "Scat", attributes_logicals, data_file) {
# logicals vector of true false for (x,y,col, fill, size)
attrs <- c("x", "y", "col", "fill" ,"size")
descriptions <- c("x-axis variable", "y-axis variable", "Color variable",
"Fill variable", "Size variable")
good_attrs <- attrs[attributes_logicals]
good_descr <- descriptions[attributes_logicals]
options <- colnames(read.csv(data_file))
l <- lapply(seq(good_attrs), function(i, good_descr, good_attrs, shortname, options) {
selectInput(
paste0(good_attrs[i], shortname, collapse = ''),
good_descr[i],
c('None', options)
) }, good_descr, good_attrs, shortname, options)
l <- merge_lists(l, actionButton(paste0("button", shortname), "Generate plot"))
l
}
merge_lists <- function(l1, l2) {
c(l1, list(l2))
}
shinyApp(ui = ui, server = server)
rm(list = ls())
library(rvest)
library(lubridate)
clean_title_or_description <- function(string) {
# removes '\n' and muliple blank spaces from string
parts <- unlist(strsplit(string, c(" ")))
parts <- parts[(parts != "") & (parts != "\n")]
string <- paste0(parts, collapse = " ")
parts <- unlist(strsplit(string, c("\n")))
parts <- parts[(parts != "") & (parts != "\n")]
paste0(parts, collapse = " ")
}
clean_list <- function(list_to_clean) {
# applies clean_title_or_description function for all elements in the list
lapply(list_to_clean, clean_title_or_description)
}
get_matching_indices <- function(vec, word) {
sapply(seq(length(vec)),
function(x, y) {
if (y[x] == word) {
return(x)} else {
return(-1)
}}, vec)
}
get_neighbours <- function(x) {
c(x-1, x, x+1)
}
clean_date <- function(date_vec) {
# Repairs date list from one url
indices <- get_matching_indices(date_vec, "Aktualizacja: ")
joining_ones <- indices[indices > -1]
for (i in joining_ones) {
indices[get_neighbours(i)] = i
}
i = 1
j = 1
prior_dates <- character(length = length(date_vec) - 2 * length(joining_ones))
posterior_dates <- character(length = length(prior_dates))
while (i <= length(indices)) {
if (indices[i] > 0) {
prior_dates[j] = date_vec[i]
posterior_dates[j] =  date_vec[i+2]
i = i + 3
} else {
prior_dates[j] = date_vec[i]
posterior_dates[j] <- NA
i = i + 1
}
j = j + 1
}
list(date = prior_dates, update = posterior_dates)
}
remove_czytaj_dalej <- function(descriptions) {
# Removes 'Czytaj dalej' from description
n <- nchar(" Czytaj dalej")
lapply(descriptions, function(x, n) {
if (nchar(x) > n){
return(substr(x, 1, (nchar(x) - n)))
} else {
return(x)
}}, n)
}
extract_element <- function(index, type) {
# extracts list of elements of given type from one url,
# possible types are 'date', 'title', 'description'
mapping <- list(date = '.entry-date',
title = '.entry-title',
description = 'p',
content = '.entry-content')
url <- "https://www.bankier.pl/wiadomosc/"
url <- paste0(url, index)
page <- read_html(url)
nodes <- html_nodes(page, mapping[[type]])
text <- html_text(nodes)
if (type == "date") {
return(clean_date(text))
}
else {
text <- clean_list(text)
if (type == "description") {
text <- remove_czytaj_dalej(text)
}
return(text)
}
}
get_page_articles <- function(index) {
# get all articles from one url
dates <- extract_element(index, "date")
titles <- extract_element(index, "title")
descriptions <- extract_element(index, "description")
lapply(seq(length(dates[["date"]])), function(i) { c(date = dates[["date"]][i],
update = dates[["update"]][i],
title = titles[i],
description = descriptions[i])})
}
extract_informations <- function(n_pages = 8, sorting = TRUE, decreasing = TRUE) {
# Get all articles
articles <- list()
for (i in seq(n_pages)) {
articles <- append(articles, get_page_articles(i))
}
if (sorting == FALSE) {
return(articles)
} else {
dates <- sapply(articles, function(x) { x[["date"]]})
return(articles[order(dates, decreasing = decreasing)])
}
}
filter <- function(article_list, word = 'brexit', doesCaseMatters = TRUE) {
# Filter function for given word or phrase
if (!doesCaseMatters) word <- tolower(word)
flags <- logical(length = length(article_list))
i <- 1
for (article in article_list) {
if (!doesCaseMatters) {
flag1 <- stringr::str_detect(tolower(article[["title"]]), word)
flag2 <- stringr::str_detect(tolower(article[["description"]]), word)
} else {
flag1 <- stringr::str_detect(article[["title"]], word)
flag2 <- stringr::str_detect(article[["description"]], word)
}
flags[i] <- flag1 | flag2
i <- i + 1
}
articles_ids <- which(flags)
if (length(articles_ids) == 0) print("No articles with given phrase")
else {
print(paste0("Articles with given phrase: ", paste(articles_ids, collapse = ",")))
return(articles_ids)
}
}
l <- extract_informations(1)
l
l <- extract_informations(100)
l <- extract_informations(20)
filter(l, "OrAz", FALSE)
filter(l, 'Facebook', FALSE)
l <- extract_informations(100)
